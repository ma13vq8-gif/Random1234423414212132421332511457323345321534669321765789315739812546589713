-- StarterPlayerScripts/SpinFlingerFlyToggle.lua
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")

-- GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "SpinFlingerGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Helper: Create toggle buttons
local function createToggle(parent, text, yPos, default)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 200, 0, 40)
    btn.Position = UDim2.new(0, 20, 0, yPos)
    btn.BackgroundColor3 = default and Color3.fromRGB(60,150,60) or Color3.fromRGB(150,60,60)
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    btn.Font = Enum.Font.SourceSansBold
    btn.TextSize = 18
    btn.Text = text..(default and ": ON" or ": OFF")
    btn.BorderSizePixel = 0
    btn.AutoButtonColor = true
    btn.Parent = parent

    local state = default
    btn.MouseButton1Click:Connect(function()
        state = not state
        btn.Text = text..(state and ": ON" or ": OFF")
        btn.BackgroundColor3 = state and Color3.fromRGB(60,150,60) or Color3.fromRGB(150,60,60)
    end)
    return function() return state end
end

-- Toggle buttons
local flyEnabled = createToggle(ScreenGui, "Fly", 50, true)
local spinEnabled = createToggle(ScreenGui, "Spin", 100, true)

-- Helper: create sliders
local function createSlider(parent, labelText, yPos, minVal, maxVal, defaultVal)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 220, 0, 60)
    frame.Position = UDim2.new(0, 20, 0, yPos)
    frame.BackgroundColor3 = Color3.fromRGB(40,40,40)
    frame.BorderSizePixel = 0
    frame.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,0,0,20)
    label.Position = UDim2.new(0,0,0,0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255,255,255)
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 14
    label.Text = labelText.." : "..defaultVal
    label.Parent = frame

    local bar = Instance.new("Frame")
    bar.Size = UDim2.new(1, -20, 0, 20)
    bar.Position = UDim2.new(0, 10, 0, 30)
    bar.BackgroundColor3 = Color3.fromRGB(100,100,100)
    bar.BorderSizePixel = 0
    bar.Parent = frame

    local knob = Instance.new("Frame")
    knob.Size = UDim2.new((defaultVal-minVal)/(maxVal-minVal),0,1,0)
    knob.Position = UDim2.new(0,0,0,0)
    knob.BackgroundColor3 = Color3.fromRGB(200,50,50)
    knob.BorderSizePixel = 0
    knob.Parent = bar

    local dragging = false
    knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = true end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouse = UserInputService:GetMouseLocation()
            local barPos = bar.AbsolutePosition.X
            local barSize = bar.AbsoluteSize.X
            local relative = math.clamp((mouse.X - barPos)/barSize, 0,1)
            knob.Size = UDim2.new(relative,0,1,0)
            local value = minVal + relative*(maxVal-minVal)
            label.Text = labelText.." : "..math.floor(value)
            return value
        end
    end)
    return function() 
        local rel = knob.Size.X.Scale
        return minVal + rel*(maxVal-minVal)
    end
end

-- Sliders
local getFlySpeed = createSlider(ScreenGui, "Fly Speed", 170, 10, 200, 50)
local getSpinSpeed = createSlider(ScreenGui, "Spin Speed", 250, 500, 5000, 2000)

-- Movement keys
local moveVec = Vector3.new(0,0,0)
local keysDown = {}
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    keysDown[input.KeyCode] = true
end)
UserInputService.InputEnded:Connect(function(input)
    if processed then return end
    keysDown[input.KeyCode] = false
end)

local function updateMoveVec()
    local vec = Vector3.new(0,0,0)
    if keysDown[Enum.KeyCode.W] then vec = vec + workspace.CurrentCamera.CFrame.LookVector end
    if keysDown[Enum.KeyCode.S] then vec = vec - workspace.CurrentCamera.CFrame.LookVector end
    if keysDown[Enum.KeyCode.A] then vec = vec - workspace.CurrentCamera.CFrame.RightVector end
    if keysDown[Enum.KeyCode.D] then vec = vec + workspace.CurrentCamera.CFrame.RightVector end
    if keysDown[Enum.KeyCode.Space] then vec = vec + Vector3.new(0,1,0) end
    if keysDown[Enum.KeyCode.LeftShift] then vec = vec - Vector3.new(0,1,0) end
    if vec.Magnitude > 0 then vec = vec.Unit end
    moveVec = vec
end

-- Main loop
RunService.RenderStepped:Connect(function(dt)
    if not HRP or not HRP.Parent then return end
    updateMoveVec()

    -- Fly
    if flyEnabled() then
        HRP.Velocity = moveVec * getFlySpeed()
    else
        HRP.Velocity = Vector3.new(0,0,0)
    end

    -- Spin
    if spinEnabled() then
        HRP.AssemblyAngularVelocity = Vector3.new(0, getSpinSpeed(), 0)
    else
        HRP.AssemblyAngularVelocity = Vector3.new(0,0,0)
    end
end)
